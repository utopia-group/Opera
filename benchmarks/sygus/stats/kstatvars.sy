(set-logic UFDTNIRA)

(synth-fun kstatvar_1_online ((prev_out Real) (prev_len Int) (prev_s1 Real) (prev_s2 Real) (__x Real)) Real
  ((R Real))
  ((R Real
    (1.0
     prev_out
     (to_real prev_len)
     prev_s1
     prev_s2
     __x
     (+ R R)
     (- R R)
     (* R R)
     (/ R R)))))

(declare-datatype List
  ((nil)
   (cons (hd Real) (tl List))))

(define-fun-rec len ((xs List)) Int
  (match xs
    ((nil 0)
     ((cons hd tl) (+ 1 (len tl))))))

(define-fun-rec sum_sq ((xs List)) Real
  (match xs
    ((nil 0.0)
    ((cons hd tl) (+ (^ hd 2) (sum_sq tl))))))

(define-fun-rec sum ((xs List)) Real
  (match xs
    ((nil 0.0)
    ((cons hd tl) (+ hd (sum tl))))))

(define-fun-rec kstatvar_1_offline ((xs List)) Real
  (let ((s1 (sum xs)) (s2 (sum_sq xs)) (l (to_real (len xs))))
    (/ (- (* l s2) (^ s1 2)) (* l (- l 1)))))

(declare-var xs0 Real)
(declare-var xs1 Real)
(declare-var xs2 Real)
(declare-var x Real)

(constraint
  (let ((old_len 3)
        (new_len 4)
        (old_s1 (+ xs0 xs1 xs2))
        (old_s2 (+ (* xs0 xs0) (* xs1 xs1) (* xs2 xs2))))
    (= (/ (- (* new_len (+ x old_s1)) (* old_s1 old_s1)) (* new_len (- new_len 1)))
       (kstatvar_1_online old_s1 old_len old_s1 old_s2 x))))

(check-synth)