include "math.skh";

pragma options "--bnd-arr-size 3";
pragma options "--bnd-unroll-amnt 10";

generator double simple_expr(fun choices, int bnd) {
    assert bnd > 0;
    if (??) {
        return choices();
    } else {
        return {| simple_expr(choices, bnd-1) (+ | - | * | /) simple_expr(choices, bnd-1) |};
    }
}

double sum(int len, double[len] in) {
    double s = 0.0;
    for (int i = 0; i < len; i++) {
        s += in[i];
    }
    return s;
}

double mean(int len, double[len] in) {
    return sum(len, in) / _cast_int_double(len);
}

double sq_sum(int len, double[len] in, double avg) {
    double sq_s = 0.0;
    for (int i = 0; i < len; i++) {
        sq_s += (in[i] - avg) * (in[i] - avg);
    }
    return sq_s;
}

double var(int len, double[len] in) {
    double avg = mean(len, in);
    return sq_sum(len, in, avg) / _cast_int_double(len);
}

double sigma(int len, double[len] in) {
    return sqrt(var(len, in));
}

double m3(int len, double[len] in, double avg) {
    double m3 = 0.0;
    for (int i = 0; i < len; i++) {
        m3 += (in[i] - avg) * (in[i] - avg) * (in[i] - avg);
    }
    return m3;
}

double skew(int len, double[len] in) {
    double avg = mean(len, in);
    return m3(len, in, avg) / (sigma(len, in) * sigma(len, in) * sigma(len, in));
}

double skew_online(double prev_out, double prev_s, double prev_sq_s, double prev_m3, int prev_len, double x) {
    double l_ = _cast_int_double(prev_len);
    generator double gen() {
        return {| prev_out | prev_s | x | prev_sq_s | prev_m3 | l_ | 1.0 | 2.0 | 3.0 |};
    }
    return simple_expr(gen, 6);
}

harness void main(double[3] in) {

    int len = 3;

    int prev_len = len - 1;
    double prev_out = skew(prev_len, in[0::len-1]);
    double prev_s = sum(prev_len, in[0::len-1]);
    double prev_avg = mean(prev_len, in[0::len-1]);
    double prev_sq_s = sq_sum(prev_len, in[0::len-1], prev_avg);
    double prev_m3 = m3(prev_len, in[0::len-1], prev_avg);
    double new_out = skew(len, in);

    assert new_out == skew_online(prev_out, prev_s, prev_sq_s, prev_m3, prev_len, in[len-1]);
}