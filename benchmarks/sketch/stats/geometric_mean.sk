include "math.skh";

pragma options "--bnd-arr-size 3";
pragma options "--bnd-unroll-amnt 10";

generator double simple_expr(fun choices, int bnd) {
    assert bnd > 0;
    int t = ??;
    if (t == 0) {
      return choices();
    } else if (t == 1) {
      return {| choices() (+ | - | * | /) simple_expr(choices, bnd-1) |};
    } else if (t == 2) {
      return exp(simple_expr(choices, bnd-1));
    }
}

double sum_log(int len, double[len] in) {
    double s = 0.0;
    for (int i = 0; i < len; i++) {
        s += log(in[i]);
    }
    return s;
}

double geometric_mean(int len, double[len] in) {
    return exp(sum_log(len, in) / _cast_int_double(len));
}

double geometric_mean_online(double prev_out, int prev_len, double x) {
    double l_ = _cast_int_double(prev_len);
    generator double gen() {
        return {| prev_out | log(x) | (log(x) - prev_out) | (l_ + 1.0) |};
    }
    return simple_expr(gen, 5);
}

harness void main(double[3] in) {

    int len = 3;

    int prev_len = len - 1;
    double prev_out = geometric_mean(prev_len, in[0::len-1]);
    double new_out = geometric_mean(len, in);

    assert new_out == geometric_mean_online(prev_out, prev_len, in[len-1]);
}
