include "math.skh";

pragma options "--bnd-arr-size 3";
pragma options "--bnd-unroll-amnt 10";

generator double simple_expr(fun choices, int bnd) {
    assert bnd > 0;
    int t = ??;
    if (t == 0) {
      return choices();
    } else if (t == 1) {
      return {| choices() (+ | - | * | /) simple_expr(choices, bnd-1) |};
    } else if (t == 2) {
      return exp(simple_expr(choices, bnd-1));
    } else if (t == 3) {
      return log(simple_expr(choices, bnd-1));
    }
}
double log_sum_exp(int len, double[len] in) {
    double alpha = 1.0;
    for (int i = 0; i < len; i++) {
        alpha = alpha > in[i] ? alpha : in[i];
    }
    double s = 0.0;
    for (int i = 0; i < len; i++) {
        s += exp(in[i] - alpha);
    }
    return alpha + log(s);
}

double log_sum_exp_online(double prev_out, double prev_alpha, double prev_s, double x) {
    generator double gen() {
        return {| prev_out | prev_alpha | x | prev_s | 1.0 | exp(prev_alpha - x) | exp(x - prev_alpha) |};
    }
    return simple_expr(gen, 5);
}

harness void main(double[3] in) {
    int len = 3;
    int prev_len = len - 1;
    double prev_out = log_sum_exp(prev_len, in[0::len-1]);
    double alpha = 1.0;
    for (int i = 0; i < prev_len; i++) {
        alpha = alpha > in[i] ? alpha : in[i];
    }
    double prev_s = 0.0;
    for (int i = 0; i < prev_len; i++) {
        prev_s += exp(in[i] - alpha);
    }
    double new_out = log_sum_exp(len, in);

    assert new_out == log_sum_exp_online(prev_out, alpha, prev_s, in[len-1]);
}
