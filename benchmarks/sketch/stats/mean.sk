include "math.skh";

pragma options "--bnd-arr-size 3";
pragma options "--bnd-unroll-amnt 8";

generator double simple_expr(fun choices, int bnd) {
    assert bnd > 0;
    if (??) {
        return choices();
    } else {
        return {| choices() (+ | - | * | /) simple_expr(choices, bnd-1) |};
    }
}

double sum(int len, double[len] in) {
    double s = 0.0;
    for (int i = 0; i < len; i++) {
        s += in[i];
    }
    return s;
}

double mean(int len, double[len] in) {
    return sum(len, in) / _cast_int_double(len);
}

double mean_online(double prev_out, double prev_s, int prev_len, double x) {
    double l_ = _cast_int_double(prev_len);
    generator double gen() {
        return {| prev_out | prev_s | x | (x - prev_out) | (l_ + 1.0) |};
    }
    return simple_expr(gen, 5);
}

harness void main(double[3] in) {

    int len = 3;

    int prev_len = len - 1;
    double prev_out = mean(prev_len, in[0::len-1]);
    double prev_s = sum(prev_len, in[0::len-1]);
    double new_out = mean(len, in);

    assert new_out == mean_online(prev_out, prev_s, prev_len, in[len-1]);
}