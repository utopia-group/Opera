include "math.skh";

pragma options "--bnd-arr-size 3";
pragma options "--bnd-unroll-amnt 10";

generator double simple_expr(fun choices, int bnd) {
    assert bnd > 0;
    if (??) {
        return choices();
    } else {
        return {| simple_expr(choices, bnd-1) (+ | - | * | /) simple_expr(choices, bnd-1) |};
    }
}

double sum(int len, double[len] in) {
    double s = 0.0;
    for (int i = 0; i < len; i++) {
        s += in[i];
    }
    return s;
}

double mean(int len, double[len] in) {
    return sum(len, in) / _cast_int_double(len);
}

double sq_sum(int len, double[len] in, double avg) {
    double sq_s = 0.0;
    for (int i = 0; i < len; i++) {
        sq_s += (in[i] - avg) * (in[i] - avg);
    }
    return sq_s;
}

double stdev(int len, double[len] in) {
    double avg = mean(len, in);
    return sqrt(sq_sum(len, in, avg) / _cast_int_double(len));
}

double fourth_power_sum(int len, double[len] in, double avg) {
    double m4 = 0.0;
    for (int i = 0; i < len; i++) {
        m4 += (in[i] - avg) * (in[i] - avg) * (in[i] - avg) * (in[i] - avg);
    }
    return m4;
}

double kurtosis(int len, double[len] in) {
    double avg = mean(len, in);
    double sigma = stdev(len, in);
    double m4 = fourth_power_sum(len, in, avg);
    return (m4 / _cast_int_double(len)) / (sigma * sigma * sigma * sigma) - 3.0;
}

double kurtosis_online(double prev_v, double prev_m4, double prev_m3, double prev_m2, double prev_s, int prev_len, double x) {
    double l_ = _cast_int_double(prev_len);
    generator double gen() {
        return {| prev_v | prev_m4 | prev_m3 | prev_m2 | prev_s | x | l_ | 1.0 |};
    }
    return simple_expr(gen, 7);
}

harness void main(double[3] in) {

    int len = 3;

    int prev_len = len - 1;
    double prev_out = kurtosis(prev_len, in[0::len-1]);
    double prev_s = sum(prev_len, in[0::len-1]);
    double prev_avg = mean(prev_len, in[0::len-1]);
    double prev_m2 = (sq_sum(prev_len, in[0::len-1], prev_avg) / _cast_int_double(prev_len));
    double prev_m4 = fourth_power_sum(prev_len, in[0::len-1], prev_avg);
    double new_out = kurtosis(len, in);

    assert new_out == kurtosis_online(prev_out, prev_m4, prev_m2 * prev_m2, prev_m2, prev_s, prev_len, in[len-1]);
}
