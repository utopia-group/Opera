// include "math.skh";

pragma options "--bnd-arr-size 5";
pragma options "--bnd-unroll-amnt 10";

generator int simple_expr(fun choices, int bnd) {
    assert bnd > 0;
    if (??) {
        return choices();
    } else {
        return {| choices() (+ | - | * | /) simple_expr(choices, bnd-1) |};
    }
}

int[5] lag(int len, int[len] in) {
    int[5] r = {0, 0, 0, 0, 0};
    for (int i = 0; i < len; i++) {
        for( int j = 0; j < 4; j++){
            r[j] = r[j+1];
        }
        r[4] = in[i];
    }
    return r;
}

int[5] lag_online(int[5] prev_r, int x) {
    generator int gen_value() {
        return {| prev_r[0] | prev_r[1] | prev_r[2] | prev_r[3] | prev_r[4] | x | 0 |};
    }
    int[5] new_r;
    for (int i = 0; i < 5; i++) {
        new_r[i] = simple_expr(gen_value, 2);
    }
    return new_r;

}

harness void main(int[5] in) {

    int len = 5;

    int[5] prev_r = lag(len-1, in[0::len-1]);
    int[5] new_out = lag(len, in);

    for( int i = 0; i < 5; i++) {
        assert new_out[i] == lag_online(prev_r, in[len-1])[i];
    }
}
