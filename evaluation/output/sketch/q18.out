SKETCH version 1.7.6
Benchmark = /workspaces/batch2stream/benchmarks/sketch/nexmark/q18.sk
/* BEGIN PACKAGE ANONYMOUS*/
struct Bid {
    int auction;
    int bidder;
    int dateTime;
    int price;
    int extra;
}
struct List<T> {
    @Immutable()
}
struct Cons<T> extends List@ANONYMOUS {
    T val;
    List<T> next;
    @Immutable()
}
struct Nil<T> extends List@ANONYMOUS {
    @Immutable()
}
/*q18.sk:80*/

void _main (int auction_1, int bidder_1, int dateTime_1, int price_1, int extra_1, int auction_2, int bidder_2, int dateTime_2, int price_2, int extra_2, int auction_3, int bidder_3, int dateTime_3, int price_3, int extra_3)/*q18.sk:80*/
{
  Bid@ANONYMOUS bid_1 = new Bid(auction=auction_1, bidder=bidder_1, dateTime=dateTime_1, price=price_1, extra=extra_1);
  Bid@ANONYMOUS bid_2 = new Bid(auction=auction_2, bidder=bidder_2, dateTime=dateTime_2, price=price_2, extra=extra_2);
  Bid@ANONYMOUS bid_3 = new Bid(auction=auction_3, bidder=bidder_3, dateTime=dateTime_3, price=price_3, extra=extra_3);
  Bid[3] in = ((Bid[3]){bid_1,bid_2,bid_3});
  List@ANONYMOUS<Bid> prev_out_s11 = null;
  query(2, in[0::2], prev_out_s11);
  List@ANONYMOUS<Bid> new_out_s13 = null;
  query(3, in, new_out_s13);
  List@ANONYMOUS<Bid> _out_s15 = null;
  query_online(prev_out_s11, in[2], _out_s15);
  bit _out_s17 = 0;
  equals_List_s0(new_out_s13, _out_s15, 6, _out_s17);
  assert (_out_s17); //Assert at q18.sk:109 (0)
}
/*q18.sk:29*/

void add <T> (List<T> lst, T val, ref List<T> _out)/*q18.sk:29*/
{
  _out = new Cons<T>(val=val, next=lst);
  return;
}
/*q18.sk:33*/

void containsKey (List<Bid> lst, Bid x, ref bit _out)/*q18.sk:33*/
{
  bit _out_s33 = 0;
  equals_List_s0(lst, new Nil<Bid>(), 6, _out_s33);
  if(_out_s33)/*q18.sk:34*/
  {
    _out = 0;
    return;
  }
  if(((((Cons<Bid>)lst).val.auction) == (x.auction)) && ((((Cons<Bid>)lst).val.bidder) == (x.bidder)))/*q18.sk:35*/
  {
    _out = 1;
    return;
  }
  bit _out_s35 = 0;
  containsKey(((Cons<Bid>)lst).next, x, _out_s35);
  _out = _out_s35;
  return;
}
/*q18.sk:17*/

void empty <T> (ref List<T> _out)/*q18.sk:17*/
{
  _out = new Nil<T>();
  return;
}
/*q18.sk:109*/
@IsEquals() 
void equals_List_s0 (List@ANONYMOUS<Bid> left_s1, List@ANONYMOUS<Bid> right_s2, int bnd_s3, ref bit _out)/*q18.sk:109*/
{
  if(bnd_s3 <= 0)/*q18.sk:109*/
  {
    _out = 0;
    return;
  }
  if((left_s1 == (null)) && (right_s2 == (null)))/*q18.sk:109*/
  {
    _out = 1;
    return;
  }
  if(left_s1 == (null))/*q18.sk:109*/
  {
    _out = 0;
    return;
  }
  if(right_s2 == (null))/*q18.sk:109*/
  {
    _out = 0;
    return;
  }
  switch(left_s1){/*q18.sk:109*/
    case Cons:
    {
      switch(right_s2){/*q18.sk:109*/
        case Cons:
        {
          bit _pac_sc_s7 = (left_s1.val) == (right_s2.val);
          if(_pac_sc_s7)/*q18.sk:109*/
          {
            bit _pac_sc_s7_s9 = 0;
            equals_List_s0(left_s1.next, right_s2.next, bnd_s3 - 1, _pac_sc_s7_s9);
            _pac_sc_s7 = _pac_sc_s7_s9;
          }
          _out = _pac_sc_s7;
          return;
        }
        case default:
        {
          _out = 0;
          return;
        }
      }
    }
    case Nil:
    {
      switch(right_s2){/*q18.sk:109*/
        case Nil:
        {
          _out = 1;
          return;
        }
        case default:
        {
          _out = 0;
          return;
        }
      }
    }
  }
}
/*q18.sk:80*/

void main__Wrapper (int auction_1, int bidder_1, int dateTime_1, int price_1, int extra_1, int auction_2, int bidder_2, int dateTime_2, int price_2, int extra_2, int auction_3, int bidder_3, int dateTime_3, int price_3, int extra_3)  implements main__WrapperNospec/*q18.sk:80*/
{
  _main(auction_1, bidder_1, dateTime_1, price_1, extra_1, auction_2, bidder_2, dateTime_2, price_2, extra_2, auction_3, bidder_3, dateTime_3, price_3, extra_3);
}
/*q18.sk:80*/

void main__WrapperNospec (int auction_1, int bidder_1, int dateTime_1, int price_1, int extra_1, int auction_2, int bidder_2, int dateTime_2, int price_2, int extra_2, int auction_3, int bidder_3, int dateTime_3, int price_3, int extra_3)/*q18.sk:80*/
{ }
/*q18.sk:61*/

void query (int len, Bid[len] in, ref List<Bid> _out)/*q18.sk:61*/
{
  List@ANONYMOUS<Bid> res_s37 = null;
  empty(res_s37)//{T=Bid};
  List@ANONYMOUS<Bid> res;
  res = res_s37;
  for(int i = 0; i < len; i = i + 1)/*Canonical*/
  {
    Bid@ANONYMOUS x = in[i];
    bit _out_s39 = 0;
    containsKey(res, x, _out_s39);
    if(!(_out_s39))/*q18.sk:65*/
    {
      List@ANONYMOUS<Bid> res_s41 = null;
      add(res, x, res_s41)//{T=Bid};
      res = res_s41;
    }
  }
  _out = res;
  return;
}
/*q18.sk:72*/

void query_online (List<Bid> prev_res, Bid x, ref List<Bid> _out)/*q18.sk:72*/
{
  bit _out_s19 = 0;
  containsKey(prev_res, x, _out_s19);
  if(!(_out_s19))/*q18.sk:73*/
  {
    List@ANONYMOUS<Bid> _out_s27 = null;
    add(prev_res, x, _out_s27)//{T=Bid};
    _out = _out_s27;
    return;
  }
  else
  {
    _out = prev_res;
    return;
  }
}
/* END PACKAGE ANONYMOUS*/
[SKETCH] DONE
Total time = 727
time=1
